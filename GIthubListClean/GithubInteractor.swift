//
//  GithubInteractor.swift
//  GIthubListClean
//
//  Created by A667243 A667243 on 30/8/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GithubBusinessLogic {
    func interactorCallApi(request: Github.Something.Request)
    func interactorGetMoreData(request: Github.Something.Request)
    func interactorLikeUser(request: Github.Something.Request)
}

protocol GithubDataStore
{
  //var name: String { get set }
}

class GithubInteractor: GithubBusinessLogic, GithubDataStore {
    
  var presenter: GithubPresentationLogic?
  var worker: GithubWorker?
  //var name: String = ""
    
    var allUser: [GitHubUser] = []
    
    var isLoadingData: Bool = false
    var currentPage: Int = 1
  
  // MARK: Do something
    
    func interactorCallApi(request: Github.Something.Request)
    {
        worker = GithubWorker()
        worker?.doSomeWork() { user in
            
            self.allUser = user ?? []
            var first10Users = Array(user!.prefix(10))
            let response = Github.Something.Response(
                githubUser: Array(self.allUser.prefix(10))
            )
            self.presenter?.presentGithubUser(response: response)
        }
    }
    
    func interactorGetMoreData(request: Github.Something.Request) {
        if !isLoadingData {
            isLoadingData = true
            currentPage += 1
            var maximumDisplay = currentPage * 10
            print("current page", currentPage*10, self.allUser.count - 1)
            
            if maximumDisplay >= self.allUser.count - 1 {
                maximumDisplay = self.allUser.count - 1
                print("reach maximum")
                return
            }
            
            let presentUser = Array(self.allUser.prefix(maximumDisplay))
            let response = Github.Something.Response(
                githubUser: presentUser
            )
            self.presenter?.presentGithubUser(response: response)
            isLoadingData = false
        }
    }
    
    func interactorLikeUser(request: Github.Something.Request) {
        let row = request.updateAt
        allUser[row].liked = !allUser[row].liked
        let response = Github.Something.Response(
            githubUser: allUser,
            updateAt: row
        )
        
        presenter?.presentRefreshTable(response: response)
    }
}
