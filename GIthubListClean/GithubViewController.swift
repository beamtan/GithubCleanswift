//
//  GithubViewController.swift
//  GIthubListClean
//
//  Created by A667243 A667243 on 30/8/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GithubDisplayLogic: class {
    func displaySomething(viewModel: Github.Something.ViewModel)
    func displayGithubUser(viewModel: Github.Something.ViewModel)
}

class GithubViewController: UIViewController, GithubDisplayLogic, UITableViewDataSource, UITableViewDelegate, CustomTableViewCellDelegate {
    
    func likeButtonTapped(forCell cell: CustomTableViewCell) {
        if let indexPath = table.indexPath(for: cell) {
            // Update the githubUser item
            githubUser[indexPath.row].liked = !githubUser[indexPath.row].liked
            print("update", indexPath.row)
            // Reload the corresponding row
            table.reloadRows(at: [indexPath], with: .automatic)
        }
    }
    
    var data: [Sunset] = []
    var githubUser: [GitHubUser] = []
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return githubUser.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let githubUser = githubUser[indexPath.row]
        let cell = table.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! CustomTableViewCell
        if let imageUrl = URL(string: githubUser.avatarUrl!) {
            cell.iconImageView.imageURLLoad(url: imageUrl)
        }
        cell.label.text = githubUser.login
        cell.likeButton.setTitle("", for: .normal)
        if githubUser.liked {
            cell.likeButton.setImage(UIImage(named: "likedButton"), for: .normal)
            
        }
        cell.githubURL.text = githubUser.url
        
        cell.delegate = self
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 140
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        // Get the visible indexPaths
        let lastElement = githubUser.count - 1
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        let screenHeight = scrollView.frame.size.height
        
        if offsetY > contentHeight - screenHeight {
            if !isLoadingData && (currentPage < githubUser.count - 1) {
                loadMoreData(forPage: currentPage)
            }
        }
    }
    
    @IBOutlet weak var table: UITableView!
    var interactor: GithubBusinessLogic?
    var router: (NSObjectProtocol & GithubRoutingLogic & GithubDataPassing)?
    
    var currentPage = 1
    var isLoadingData = false
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = GithubInteractor()
    let presenter = GithubPresenter()
    let router = GithubRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
      table.dataSource = self
      table.delegate = self
      doSomething()
      startCallGithubUser()
  }
    
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Github.Something.Request(pageNumber: currentPage)
        interactor?.doSomething(request: request)
    }
    
    func startCallGithubUser() {
        let request = Github.Something.Request(pageNumber: currentPage)
        interactor?.interactorCallApi(request: request)
    }
    
    func displaySomething(viewModel: Github.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
        data = viewModel.dataArray ?? []
        print(data)
        DispatchQueue.main.async {
            self.table.reloadData()
        }
    }
    
    func displayGithubUser(viewModel: Github.Something.ViewModel) {
        githubUser = viewModel.githubUser ?? []
        DispatchQueue.main.async {
            self.table.reloadData()
        }
        self.isLoadingData = false
    }
    
    func loadMoreData(forPage: Int) {
        let currentPage = Github.Something.Request(pageNumber: forPage)
        interactor?.interactorGetMoreData(request: currentPage)
    }
    
    
}

let imageCache = NSCache<NSString, UIImage>()

extension UIImageView {

    func imageURLLoad(url: URL) {

        DispatchQueue.global().async { [weak self] in
            func setImage(image:UIImage?) {
                DispatchQueue.main.async {
                    self?.image = image
                }
            }
            let urlToString = url.absoluteString as NSString
            if let cachedImage = imageCache.object(forKey: urlToString) {
                setImage(image: cachedImage)
            } else if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {
                DispatchQueue.main.async {
                    imageCache.setObject(image, forKey: urlToString)
                    setImage(image: image)
                }
            }else {
                setImage(image: nil)
            }
        }
    }
}

