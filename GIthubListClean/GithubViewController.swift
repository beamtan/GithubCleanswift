//
//  GithubViewController.swift
//  GIthubListClean
//
//  Created by A667243 A667243 on 30/8/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GithubDisplayLogic: class {
    func displayGithubUser(viewModel: Github.UserDetail.ViewModel)
    func refreshTable(viewModel: Github.UserIsLiked.ViewModel)
    func showAlert(title: String, message: String)
}

class GithubViewController: UIViewController, GithubDisplayLogic {
    var interactor: GithubBusinessLogic?
    var router: (NSObjectProtocol & GithubRoutingLogic & GithubDataPassing)?

    @IBOutlet private weak var table: UITableView!
    @IBOutlet private weak var mainView: UIView!
    
    private var githubUser: [GitHubUser] = []
    private var currentPage = 1
    private var isLoadingData = false
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = GithubInteractor()
        let presenter = GithubPresenter()
        let router = GithubRouter()
        let worker = GithubWorker()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        table.dataSource = self
        table.delegate = self
        initFetchGithubData()
    }
    
    // MARK: To Interactor
    
    func initFetchGithubData() {
        interactor?.interactorCallApi()
    }
    
    func loadMoreData(forPage: Int) {
//        let currentPage = Github.UserPage.Request(pageNumber: forPage)
        interactor?.interactorGetMoreData()
    }
    
    // MARK: From Presenter
    
    func displayGithubUser(viewModel: Github.UserDetail.ViewModel) {
        githubUser = viewModel.githubUser ?? []
        DispatchQueue.main.async {
            self.table.reloadData()
        }
        self.isLoadingData = false
    }
    
    func refreshTable(viewModel: Github.UserIsLiked.ViewModel) {
        let index = viewModel.updateAt
        let indexPath = IndexPath(row: index, section: 0)
        table.reloadRows(at: [indexPath], with: .automatic)
    }
    
    func showAlert(title: String, message: String) {
        let alertController = UIAlertController(
            title: title,
            message: message,
            preferredStyle: .alert
        )
        DispatchQueue.main.async {
            let okAction = UIAlertAction(title: "OK", style: .default, handler: nil)
            alertController.addAction(okAction)
            self.present(alertController, animated: true, completion: nil)
        }
    }
}

// MARK: - GithubDisplayLogic

extension GithubViewController: UITableViewDataSource, UITableViewDelegate, CustomTableViewCellDelegate {
    
    func likeButtonTapped(forCell cell: CustomTableViewCell) {
        if let indexPath = table.indexPath(for: cell) {
            githubUser[indexPath.row].isLiked = !githubUser[indexPath.row].isLiked
            
            let request = Github.UserIsLiked.Request(
                updateAt: indexPath.row
            )
            
            interactor?.interactorLikeUser(request: request)
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return githubUser.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let githubUser = githubUser[indexPath.row]
        let cell = table.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! CustomTableViewCell
        
        setupURLLabelFrame(cell: cell)
        setUpTableUI(cell: cell, githubUser: githubUser)

        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 140
    }
    
    private func setupURLLabelFrame(cell: CustomTableViewCell) {
        cell.githubURL.numberOfLines = 0
        cell.githubURL.lineBreakMode = .byWordWrapping
        
        let maxSize = CGSize(width: 200.0, height: CGFloat.greatestFiniteMagnitude)
        let requiredSize = cell.githubURL.sizeThatFits(maxSize)
        
        cell.githubURL.frame = CGRect(
            x: cell.githubURL.frame.origin.x,
            y: cell.githubURL.frame.origin.y,
            width: requiredSize.width,
            height: requiredSize.height
        )
    }
    
    private func setUpTableUI(cell: CustomTableViewCell, githubUser: GitHubUser) {
        cell.label.text = githubUser.login
        cell.likeButton.setTitle("", for: .normal)
        cell.likeButton.frame.size = CGSize(width: 20, height: 20)
        cell.githubURL.text = githubUser.url
        cell.delegate = self
        
        if let imageUrl = URL(string: githubUser.avatarUrl!) {
            cell.iconImageView.imageURLLoad(url: imageUrl)
        }
        
        let imageSize = CGSize(width: 20, height: 20)
        if githubUser.isLiked {
            let likedImage = UIImage(named: "likedButton")?.resize(targetSize: imageSize)
            cell.likeButton.setImage(likedImage, for: .normal)
        } else {
            let likeImage = UIImage(named: "likeButton")?.resize(targetSize: imageSize)
            cell.likeButton.setImage(likeImage, for: .normal)
        }
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        let screenHeight = scrollView.frame.size.height
        
        if offsetY > contentHeight - screenHeight {
            if !isLoadingData {
                loadMoreData(forPage: currentPage)
            }
        }
    }
}

extension UIImageView {
    func imageURLLoad(url: URL) {
        DispatchQueue.global().async { [weak self] in
            func setImage(image:UIImage?) {
                DispatchQueue.main.async {
                    self?.image = image
                }
            }
            let urlToString = url.absoluteString as NSString
            if let cachedImage = NSCache<NSString, UIImage>().object(forKey: urlToString) {
                setImage(image: cachedImage)
            } else if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {
                DispatchQueue.main.async {
                    NSCache<NSString, UIImage>().setObject(image, forKey: urlToString)
                    setImage(image: image)
                }
            }else {
                setImage(image: nil)
            }
        }
    }
}

extension UIImage {
    func resize(targetSize: CGSize) -> UIImage {
        let size = self.size

        let widthRatio = targetSize.width / size.width
        let heightRatio = targetSize.height / size.height

        var newSize: CGSize
        if widthRatio > heightRatio {
            newSize = CGSize(width: size.width * heightRatio, height: size.height * heightRatio)
        } else {
            newSize = CGSize(width: size.width * widthRatio, height: size.height * widthRatio)
        }

        let rect = CGRect(origin: .zero, size: newSize)

        UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)
        self.draw(in: rect)
        let newImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return newImage ?? UIImage()
    }
}

